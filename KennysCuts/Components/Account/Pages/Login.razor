@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using KennysCuts.Components.Account.Shared
@using KennysCuts.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<!-- Container centered with a minimum vertical height -->
<div class="container d-flex justify-content-center align-items-center" style="min-height: 65vh;">
    <!-- Dark-themed card with rounded corners, shadow, and specific width -->
    <div class="card bg-white shadow-lg rounded-3 border-0" style="width: 400px;">
        <div class="card-body p-4">
            <!-- Centered title with extra bottom margin for spacing -->
            <h4 class="card-title text-center mb-4">Login</h4>

            <EditForm OnValidSubmit="LoginUser" Model="Model" FormName="loginForm">
                <div class="d-flex flex-column align-items-center">

                    <!-- Email input field -->
                    <div class="col-md-10 mb-3">
                        <label for="email" class="form-label fw-bold">Email</label>
                        <InputText @bind-Value="Model.Email" class="form-control rounded-pill px-3" placeholder="name@example.com" />
                    </div>

                    <!-- Password input field -->
                    <div class="col-md-10 mb-4">
                        <label for="password" class="form-label fw-bold">Password</label>
                        <InputText type="password" @bind-Value="Model.Password" class="form-control rounded-pill px-3" placeholder="Password" />
                    </div>

                    <!-- Login button with rounded-pill styling -->
                    <div class="col-md-10 d-flex gap-3">
                        <button type="submit" class="btn btn-outline-dark w-50 rounded-pill fw-bold">Login</button>

                        <!-- Register link styled as a button -->
                        <a href="@(NavigationManager.ToAbsoluteUri("Account/Register"))" class="btn btn-outline-danger w-50 rounded-pill fw-bold">Register</a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {
    private string? statusMessage;
    private bool isError;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ApplicationScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Model.Email, Model.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            statusMessage = "Invalid email or password. Please check carefully and re-enter.";
            isError = true;
        }
    }

    private sealed class LoginModel
    {
        public string Email { get; set; } = "";

        public string Password { get; set; } = "";
    }
}
