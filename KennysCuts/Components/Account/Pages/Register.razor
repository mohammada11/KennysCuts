@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using KennysCuts.Components.Account.Shared
@using KennysCuts.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<StatusMessage Message="@statusMessage" IsError="@isError" />
<div class="container d-flex justify-content-center align-items-center min-vh-100">
    <div class="card w-50 shadow-lg rounded-3 border-0">
        <div class="card-body p-4 bg-white">
            <h4 class="card-title text-center mb-4">Register</h4>
            <!-- EditForm component for managing form data and submission handling -->
            <EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="d-flex flex-column align-items-center">
                    <!-- Input field for 'Name'-->
                    <div class="col-md-10 mb-3">
                        <label for="name" class="form-label fw-bold">Name</label>
                        <InputText class="form-control rounded-pill px-3" placeholder="Name" @bind-Value="Model.Name" />
                        <!-- Displays the validation message -->
                        <ValidationMessage For="@(() => Model!.Name)" />
                     </div>

                    <!-- Input field for 'Surname' with label, input, and validation message -->
                    <div class="col-md-10 mb-3">
                        <label for="surname" class="form-label fw-bold">Surname</label>
                        <InputText class="form-control rounded-pill px-3" placeholder="Surname" @bind-Value="Model.Surname" />
                        <ValidationMessage For="@(() => Model!.Surname)" />
                    </div>

                    <!-- Input field for 'Email'-->
                    <div class="col-md-10 mb-3">
                        <label for="email" class="form-label fw-bold">Email</label>
                        <InputText id="email" class="form-control rounded-pill px-3" placeholder="Email" @bind-Value="Model.Email" />

                        <!-- Displays the validation message -->
                        <div class="small">
                            <ValidationMessage For="@(() => Model!.Email)" />
                        </div>
                    </div>

                    <!-- Input field for 'Password' with label, input, and validation message -->
                    <div class="col-md-10 mb-3">
                        <label for="password" class="form-label fw-bold">Password</label>
                        <InputText type="password" class="form-control rounded-pill px-3" placeholder="Password" @bind-Value="Model.Password" />
                        <ValidationMessage For="@(() => Model!.Password)" />
                    </div>

                    <!-- Input field for 'Confirm Password' with label, input, and validation message -->
                    <div class="col-md-10 mb-4">
                        <label for="confirm-password" class="form-label fw-bold">Confirm Password</label>
                        <InputText type="password" class="form-control rounded-pill px-3" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                        <ValidationMessage For="@(() => Model!.ConfirmPassword)" />
                    </div>

                    <!-- Submit button styled with red background, rounded edges, and bold font -->
                    <div class="col-md-6">
                        <button type="submit" class="btn btn-danger w-100 rounded-pill py-2 fw-bold">Register</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>




@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    public async Task RegisterUser(EditContext editContext)
    {
        // Creates the user.
        var user = new User
            {
                UserName = Model.Email,
                Email = Model.Email,
                Name = Model.Name,
                Surname = Model.Surname,
            };

        // Adds to the database.
        var result = await UserManager.CreateAsync(user, Model.Password);

        // Reports any errors.
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        // Assigns the role.
        await UserManager.AddToRoleAsync(user, "Customer");

        // Logs the user in.
        var userId = await UserManager.GetUserIdAsync(user);
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class RegisterModel
    {
        [Required(ErrorMessage = "Please enter your email.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Please enter a password.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Please enter your first name.")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Please enter your last name.")]
        public string Surname { get; set; } = "";

    }
}