@using KennysCuts.Model
@using KennysCuts.Context
@inject BookingProvider BookingProvider
@inject NavigationManager NavigationManager





<EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <div class="container py-5">
        <div class="row g-4">
            <div class="row-lg-6 col-12 mt-1">
                <div class="card h-100 shadow-lg rounded-3 border-0">
                    <div class="card-body bg-light d-flex flex-column">
                        <h4 class="card-title text-center text-dark fw-bold mb-4">Booking Details</h4>

                        <!-- Timeslot Field -->
                        <div class="form-group mb-3">
                            <label for="timeslot" class="form-label">Timeslot</label>
                            <InputDate id="timeslot" class="form-control" @bind-Value="@Model.Timeslot" placeholder="Enter new time" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model.Timeslot)" />
                            </div>
                        </div>

                        <!-- Barber Field -->
                        <div class="form-group mb-3">
                            <label for="barber" class="form-label">Barber</label>
                            <InputText id="barber" class="form-control" @bind-Value="@Model.BarberNameOrId" placeholder="Enter barber" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model.BarberNameOrId)" />
                            </div>
                        </div>

                        <!-- Service Field -->
                        <div class="form-group mb-3">
                            <label for="services" class="form-label">Service</label>
                            <InputText id="services" class="form-control" @bind-Value="@Model.ServiceNameOrId" placeholder="Enter service" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model.ServiceNameOrId)" />
                            </div>
                        </div>

                        <!-- Email Field -->
                        <div class="form-group mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="@Model.Email" placeholder="Enter email" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model.Email)" />
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-danger w-48" type="submit">Save</button>
                            <button class="btn btn-dark w-48" type="button">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>




</EditForm>

@code {
    [Parameter]
    public Booking? Booking { get; set; }

    private BookingModel Model { get; set; }

    protected override void OnParametersSet()
    {
        Model = Booking is null ? new BookingModel() : new BookingModel(Booking);
        base.OnParametersSet();
    }

    private async Task HandleSubmit()
    {
        var booking = Booking ?? new Booking();

        booking.User = new User { Name = Model.UserNameOrId }; // Or use an ID lookup
        booking.Services = new Services { Name = Model.ServiceNameOrId }; // Or use an ID lookup
        booking.Barber = new Barber { Name = Model.BarberNameOrId }; // Or use an ID lookup
        booking.Timeslot = Model.Timeslot;
        booking.Email = Model.Email;


      await BookingProvider.UpdateBookingAsync(booking);
        

        NavigationManager.NavigateTo("/");
    }

    private sealed class BookingModel
    {
    
        public string UserNameOrId { get; set; } = ""; // For binding User's Name or ID

        
        public string ServiceNameOrId { get; set; } = ""; // For binding Service's Name or ID

       
        public string BarberNameOrId { get; set; } = ""; // For binding Barber's Name or ID

       
        public DateOnly Timeslot { get; set; }

        
        public string Email { get; set; } = "";

        public BookingModel()
        {
        }

        public BookingModel(Booking booking)
        {
            UserNameOrId = booking.User.Name; // Or booking.User.Id
            ServiceNameOrId = booking.Services.Name; // Or booking.Services.Id
            BarberNameOrId = booking.Barber.Name; // Or booking.Barber.Id
            Timeslot = booking.Timeslot;
            Email = booking.Email;
        }
    }

}

