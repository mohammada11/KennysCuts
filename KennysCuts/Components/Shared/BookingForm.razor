@using KennysCuts.Model
@using KennysCuts.Context
@using System.ComponentModel.DataAnnotations
@inject BookingProvider BookingProvider
@inject NavigationManager NavigationManager
@inject HaircutsProvider HaircutProvider
@inject BarberProvider BarberProvider

<EditForm Model="@Model" OnValidSubmit="@EditBooking">
    <DataAnnotationsValidator />
    <div class="container py-5">
        <div class="row g-4">
            <div class="row-lg-6 col-12 mt-1">
                <div class="card h-100 shadow-lg rounded-3 border-0">
                    <div class="card-body bg-light d-flex flex-column">
                        <h4 class="card-title text-center text-dark fw-bold mb-4">Booking Details</h4>

                        <!-- Date Field -->
                        <div class="form-group mb-3">
                            <!-- Label for the timeslot input -->
                            <label for="timeslot" class="form-label">Date</label>

                            <!-- Input field for selecting a timeslot, bound to the 'Timeslot' property of the model -->
                            <InputDate id="timeslot" class="form-control" @bind-Value="@Model.Date" placeholder="Enter new date" />

                            <!-- Displays an error message if the 'Timeslot' validation fails -->
                            <div class="small">
                                <ValidationMessage For="@(() => Model.Date)" />
                            </div>
                        </div>

                        <!-- Timeslot Field -->
                        <div class="form-group mb-3">
                            <!-- Label for the timeslot dropdown -->
                            <label for="timeslot" class="form-label">Time</label>
                            <InputSelect id="timeslot" class="form-control" @bind-Value="@Model.Timeslot">
                                <option value="">Select a timeslot</option>
                                <!-- Dynamically populate the dropdown with available timeslots if they exist -->
                                @if (AvailableTimeslots != null)
                                {
                                    foreach (var timeslot in AvailableTimeslots)
                                    {
                                        <!-- Create an option for each available timeslot -->
                                        <option value="@timeslot">@timeslot</option>
                                    }
                                }
                            </InputSelect>

                            <!-- Display validation message for the Timeslot field if there are errors -->
                            <div class="small">
                                <ValidationMessage For="@(() => Model.Timeslot)" />
                            </div>
                        </div>

                        <!-- Barber Field -->
                        <div class="form-group mb-3">
                            <label for="barber" class="form-label">Barber</label>
                            <InputSelect id="barber" class="form-control" @bind-Value="@Model.BarberNameOrId">
                                <option value="">Select a barber</option>
                                @if (AvailableBarbers != null)
                                {
                                    foreach (var barber in AvailableBarbers)
                                    {
                                        <option value="@barber.Name">@barber.Name</option>
                                    }
                                }
                            </InputSelect>
                            <div class="small">
                                <ValidationMessage For="@(() => Model.BarberNameOrId)" />
                            </div>
                        </div>

                        <!-- Service Field -->
                        <div class="form-group mb-3">
                            <label for="service" class="form-label">Service</label>
                            <InputSelect id="service" class="form-control" @bind-Value="@Model.ServiceNameOrId">
                                <option value="">Select a service</option>
                                @if (AvailableServices != null)
                                {
                                    foreach (var service in AvailableServices)
                                    {
                                        <option value="@service.Name">@service.Name</option>
                                    }
                                }
                            </InputSelect>
                            <div class="small">
                                <ValidationMessage For="@(() => Model.ServiceNameOrId)" />
                            </div>
                        </div>

                        <!-- Email Field -->
                        <div class="form-group mb-3">
                            <!-- Label for the email input -->
                            <label for="email" class="form-label">Email</label>

                            <!-- Input field for entering the user's email, bound to the 'Email' property of the model -->
                            <InputText id="email" class="form-control" @bind-Value="@Model.Email" placeholder="Enter email" />

                            <!-- Validation message displayed for the 'Email' field if validation fails -->
                            <div class="small">
                                <ValidationMessage For="@(() => Model.Email)" />
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between mt-4">
                            <!-- Submit button to either cancel or save changes, based on whether 'Booking' is null -->
                            <button class="btn btn-dark w-48" type="submit">
                                @(Booking == null ? "Cancel Changes" : "Save Changes") 
                            </button>
                        </div>

                   </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Booking? Booking { get; set; }

    private BookingModel Model { get; set; }

    private List<string>? AvailableTimeslots { get; set; }
    private List<Services>? AvailableServices { get; set; }
    private List<Barber>? AvailableBarbers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Load available options
        AvailableTimeslots = await BookingProvider.GetAvailableTimeslotsAsync();
        AvailableServices = await HaircutProvider.GetAllServicesAsync();
        AvailableBarbers = await BarberProvider.GetAllBarberAsync();
    }

    protected override void OnParametersSet()
    {
        if (Booking != null)
        {
            // Populate the model with existing booking details if booking is provided
            Model = new BookingModel(Booking);
        }
        base.OnParametersSet();
    }

    private async Task EditBooking()
    {
        // Use existing booking or create a new one
        var booking = Booking ?? new Booking();

        // Get service by name or ID
        var service = await BookingProvider.GetServiceByNameOrIdAsync(Model.ServiceNameOrId);

        // Get barber by name or ID
        var barber = await BookingProvider.GetBarberByNameOrIdAsync(Model.BarberNameOrId);

        // Assign values to the booking
        booking.Services = service; 
        booking.Barber = barber;
        booking.Date = Model.Date;
        booking.Timeslot = Model.Timeslot;
        booking.Email = Model.Email;

        // Update the booking
        await BookingProvider.UpdateBookingAsync(booking);

        // Redirect to the "my bookings" page
        NavigationManager.NavigateTo("/my-bookings");

    }

    private sealed class BookingModel
    {

        [Required(ErrorMessage = "Please enter your desired service")]
        public string ServiceNameOrId { get; set; } = ""; // For binding Service's Name or ID

        [Required(ErrorMessage = "Please enter your desired barber")]
        public string BarberNameOrId { get; set; } = ""; // For binding Barber's Name or ID

        [Required(ErrorMessage = "Please enter your desired date")]
        public DateOnly Date { get; set; }

        [Required(ErrorMessage = "Please enter your desired time")]
        public string Timeslot { get; set; } = "";

        [Required(ErrorMessage = "Please enter your contact email")]
        public string Email { get; set; } = "";

        public BookingModel()
        {
        }

        public BookingModel(Booking booking)
        {
            // Get the service name from the booking
            ServiceNameOrId = booking.Services.Name;

            // Get the barber's name from the booking
            BarberNameOrId = booking.Barber.Name;

            // Get the booking date
            Date = booking.Date;

            // Get the booking timeslot
            Timeslot = booking.Timeslot;

            // Get the customer's email
            Email = booking.Email;
        }
    }

}

